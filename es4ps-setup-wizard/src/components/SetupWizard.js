/* SetupWizard.js
 * A brief explanation of the purpose of this file:
 * This file exists to provide a wizard-like interface for setting up the ES4PS
 * containers. It will prompt the user for the necessary configuration for RabbitMQ, Samba, and Django.
 * Once the user has provided the necessary and valid configuration, a composition
 * of containers will be generated by the CreateES4PSContainersComposition component.
 * And it will be available for download by the user through the DownloadContainersComposition component.
 *
 * Why the file file was created the way it was?
 * Because in future versions of the ES4PS, the user will be able to choose which
 * containers to include in the composition. This will allow the user to create a
 * composition of containers that best suits their needs. For example, if there
 * is existing Django and RabbitMQ containers, the user can choose to include only
 * the Samba container in the composition to make a redundant Samba installation
 * between multiple physical locations, for example: multiple university campi.
 */

import RabbitMQSetup from "./RabbitMQSetup.js";
import SambaSetup from "./SambaSetup.js";
import DjangoSetup from "./DjangoSetup.js";
import { validConfig } from "./validators";
import CreateES4PSContainersComposition from "./CreateES4PSContainersComposition.js";
import DownloadContainersComposition from "./DownloadContainersComposition.js";

import { useState, useEffect } from "react";

const SetupWizard = () => {
    // defining state to store rabbit mq configuration dictionary
    const [RabbitMQConfig, setRabbitMQConfig] = useState({
        username: {
            value: "",
            valid: false,
        },
        vhost: {
            value: "",
            valid: false,
        },
        password: {
            value: "",
            valid: false,
        },
    });
    // defining state to verify if the configuration is valid
    const [validRabbitMQConfig, setValidRabbitMQConfig] = useState(false);

    // defining state to store samba configuration dictionary
    const [SambaConfig, setSambaConfig] = useState({
        hostname: {
            value: "",
            valid: false,
        },
        ip: {
            value: "",
            valid: false,
        },
        domain: {
            value: "",
            valid: false,
        },
        realmSuffix: {
            value: "",
            valid: false,
        },
        adminPassword: {
            value: "",
            valid: false,
        },
    });
    // defining state to verify if the configuration is valid
    const [validSambaConfig, setValidSambaConfig] = useState(false);

    // defining state for the django configuration dictionary
    const [DjangoConfig, setDjangoConfig] = useState({
        superuserName: {
            value: "",
            valid: false,
        },
        superuserPassword: {
            value: "",
            valid: false,
        },
        FQDN: {
            value: "",
            valid: false,
        },
        allowedEmailDomains: {
            value: "",
            valid: false,
        },
        smtpServer: {
            value: "",
            valid: false,
        },
        smtpPort: {
            value: "",
            valid: false,
        },
        smtpUsername: {
            value: "",
            valid: false,
        },
        smtpPassword: {
            value: "",
            valid: false,
        },
    });
    // defining state to verify if the configuration is valid
    const [validDjangoConfig, setValidDjangoConfig] = useState(false);

    /* it is possible to see that all these react states stores
     * the necessary parameters for ES4PS to work. As the states
     * are very similar, maybe in future releases of ES4PS
     * will be possible to create generic states to store
     * the necessary parameters for each container.
     */

    // define state for all-in-one configuration dictionary
    const [AllInOneConfig, setAllInOneConfig] = useState({
        rabbitMQ: RabbitMQConfig,
        samba: SambaConfig,
        django: DjangoConfig,
    });
    // define state to verify if the configuration is valid
    const [validAllInOneConfig, setValidAllInOneConfig] = useState(false);

    // the state above puts together the configuration needed by
    // all containers. In future versions where the user can choose
    // which containers to include in the composition it will be
    // necessary to handle the states of the containers separately.

    // define state for the result of the composition
    const [CompositionResult, setCompositionResult] = useState(null);
    const [isCompositionResult, setIsCompositionResult] = useState(false);

    // this state wil basically store the zip file generated by one
    // of the internal functions present in the CreateES4PSContainersComposition
    // component. This zip file will be available for download by the user.

    // this useEffect is triggered when the CompositionResult state is available
    // to set the isCompositionResult state to true. This will trigger the
    // DownloadContainersComposition component to be rendered on the screen.
    // as seen in {isCompositionResult && 
    //              <DownloadContainersComposition zipfile={CompositionResult} />
    // }
    useEffect(() => {
        if (CompositionResult) {
            setIsCompositionResult(true);
        }
    }, [CompositionResult]);

    // this is a composition key to force react to re-render the 
    // CreateES4PSContainersComposition component when the AllInOneConfig
    // state is updated. This is necessary because the CreateES4PSContainersComposition
    // component is being only rendered when the configuration is valid.
    const [ compositionKey, setCompositionKey ] = useState(0);

    // this is the main useEffect of the SetupWizard component and it is
    // triggered whenever a field in the configuration of the containers is
    // updated. It will update the AllInOneConfig state with the new configuration
    // of the containers and check every time if the configuration is valid,
    // updating the respective flags that control the rendering of the
    // CreateES4PSContainersComposition component, which is a represented
    // by a button that will be rendered on the screen only if the configuration
    // is valid.
    useEffect(() => {
        let newConfig = {
            rabbitMQ: RabbitMQConfig,
            samba: SambaConfig,
            django: DjangoConfig,
        };
        setAllInOneConfig(() => (
            newConfig
        ));
        setValidRabbitMQConfig(validConfig(RabbitMQConfig));
        setValidSambaConfig(validConfig(SambaConfig));
        setValidDjangoConfig(validConfig(DjangoConfig));
        setValidAllInOneConfig(
            validConfig(RabbitMQConfig) &&
                validConfig(SambaConfig) &&
                validConfig(DjangoConfig)
        );
        setCompositionKey((prevKey) => (
            validAllInOneConfig ? prevKey + 1 : prevKey
        ));
    }, [RabbitMQConfig, SambaConfig, DjangoConfig]);

    return (
        <div>
            <h1>Setup Wizard</h1>
            <RabbitMQSetup
                Config={RabbitMQConfig}
                ConfigUpdateHandler={setRabbitMQConfig}
            />
            <SambaSetup
                Config={SambaConfig}
                ConfigUpdateHandler={setSambaConfig}
            />
            <DjangoSetup
                Config={DjangoConfig}
                ConfigUpdateHandler={setDjangoConfig}
            />
            {validAllInOneConfig && (
                <CreateES4PSContainersComposition
                    key={compositionKey}
                    Config={AllInOneConfig}
                    ConfigUpdateHandler={setAllInOneConfig}
                    setCompositionResult={setCompositionResult}
                />
            )}
            {isCompositionResult && (
                <DownloadContainersComposition zipfile={CompositionResult} />
            )}
        </div>
    );
};

export default SetupWizard;
